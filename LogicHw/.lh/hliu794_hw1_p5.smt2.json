{
    "sourceFile": "hliu794_hw1_p5.smt2",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1739772206033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739772301588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,24 @@\n ; Declare real variables for the left and right end of intervals\r\n+(declare-const l0 Real)\r\n+(declare-const r0 Real)\r\n (declare-const l1 Real)\r\n (declare-const r1 Real)\r\n (declare-const l2 Real)\r\n (declare-const r2 Real)\r\n (declare-const l3 Real)\r\n (declare-const r3 Real)\r\n-(declare-const l4 Real)\r\n-(declare-const r4 Real)\r\n \r\n-;; Intervals must be valid (left endpoint < right endpoint)\r\n+; Function to check if A intersects with B\r\n+(define-fun intersects ((l0 Real) (r0 Real) (l1 Real) (r1 Real)) Bool\r\n+  (and (< l0 r1) (< l1 r0)))\r\n+\r\n+; Intervals must be valid (left endpoint < right endpoint)\r\n (assert (< l1 r1))\r\n (assert (< l2 r2))\r\n (assert (< l3 r3))\r\n (assert (< l4 r4))\r\n \r\n-;; Define intersection conditions\r\n-(define-fun intersects ((lA Real) (rA Real) (lB Real) (rB Real)) Bool\r\n-  (and (< lA rB) (< lB rA)))\r\n-\r\n ;; C4 adjacency constraints:\r\n (assert (intersects l1 r1 l2 r2))  ;; Edge (1,2)\r\n (assert (intersects l2 r2 l3 r3))  ;; Edge (2,3)\r\n (assert (intersects l3 r3 l4 r4))  ;; Edge (3,4)\r\n"
                },
                {
                    "date": 1739772339912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,13 @@\n ; Function to check if A intersects with B\r\n (define-fun intersects ((l0 Real) (r0 Real) (l1 Real) (r1 Real)) Bool\r\n   (and (< l0 r1) (< l1 r0)))\r\n \r\n-; Intervals must be valid (left endpoint < right endpoint)\r\n+; Check for each interval, l < r\r\n+(assert (< l0 r0))\r\n (assert (< l1 r1))\r\n (assert (< l2 r2))\r\n (assert (< l3 r3))\r\n-(assert (< l4 r4))\r\n \r\n ;; C4 adjacency constraints:\r\n (assert (intersects l1 r1 l2 r2))  ;; Edge (1,2)\r\n (assert (intersects l2 r2 l3 r3))  ;; Edge (2,3)\r\n"
                },
                {
                    "date": 1739772522855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,16 +17,16 @@\n (assert (< l1 r1))\r\n (assert (< l2 r2))\r\n (assert (< l3 r3))\r\n \r\n-;; C4 adjacency constraints:\r\n-(assert (intersects l1 r1 l2 r2))  ;; Edge (1,2)\r\n-(assert (intersects l2 r2 l3 r3))  ;; Edge (2,3)\r\n-(assert (intersects l3 r3 l4 r4))  ;; Edge (3,4)\r\n-(assert (intersects l4 r4 l1 r1))  ;; Edge (4,1)\r\n+; Check for each edge, two intervals should intersect\r\n+(assert (intersects l0 r0 l1 r1))\r\n+(assert (intersects l0 r0 l2 r2))\r\n+(assert (intersects l1 r1 l3 r3))\r\n+(assert (intersects l2 r2 l3 r3))\r\n \r\n-;; Non-adjacency constraints (these pairs must not intersect):\r\n-(assert (not (intersects l1 r1 l3 r3))) ;; No edge (1,3)\r\n-(assert (not (intersects l2 r2 l4 r4))) ;; No edge (2,4)\r\n+; Check for two nodes that are not connected, two intervals should not intersect\r\n+(assert (not (intersects l0 r0 l4 r4)))\r\n+(assert (not (intersects l1 r1 l2 r2)))\r\n \r\n ;; Check satisfiability\r\n (check-sat)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739772543597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,6 +27,9 @@\n ; Check for two nodes that are not connected, two intervals should not intersect\r\n (assert (not (intersects l0 r0 l4 r4)))\r\n (assert (not (intersects l1 r1 l2 r2)))\r\n \r\n-;; Check satisfiability\r\n-(check-sat)\n\\ No newline at end of file\n+; Check satisfiability\r\n+(check-sat)\r\n+\r\n+; Get model\r\n+(get-model)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739773141209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+(set-logic ALL)\r\n+\r\n+; Declare real variables for the left and right end of intervals\r\n+(declare-const l0 Real)\r\n+(declare-const r0 Real)\r\n+(declare-const l1 Real)\r\n+(declare-const r1 Real)\r\n+(declare-const l2 Real)\r\n+(declare-const r2 Real)\r\n+(declare-const l3 Real)\r\n+(declare-const r3 Real)\r\n+\r\n+; Function to check if A intersects with B\r\n+(define-fun intersects ((l0 Real) (r0 Real) (l1 Real) (r1 Real)) Bool\r\n+  (and (< l0 r1) (< l1 r0)))\r\n+\r\n+; Check for each interval, l < r\r\n+(assert (< l0 r0))\r\n+(assert (< l1 r1))\r\n+(assert (< l2 r2))\r\n+(assert (< l3 r3))\r\n+\r\n+; Check for each edge, two intervals should intersect\r\n+(assert (intersects l0 r0 l1 r1))\r\n+(assert (intersects l0 r0 l2 r2))\r\n+(assert (intersects l1 r1 l3 r3))\r\n+(assert (intersects l2 r2 l3 r3))\r\n+\r\n+; Check for two nodes that are not connected, two intervals should not intersect\r\n+(assert (not (intersects l0 r0 l4 r4)))\r\n+(assert (not (intersects l1 r1 l2 r2)))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\r\n+\r\n+; Get model\r\n+(get-model)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739773599301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,47 +26,12 @@\n (assert (intersects l1 r1 l3 r3))\r\n (assert (intersects l2 r2 l3 r3))\r\n \r\n ; Check for two nodes that are not connected, two intervals should not intersect\r\n-(assert (not (intersects l0 r0 l4 r4)))\r\n+(assert (not (intersects l0 r0 l3 r3)))\r\n (assert (not (intersects l1 r1 l2 r2)))\r\n \r\n ; Check satisfiability\r\n (check-sat)\r\n \r\n ; Get model\r\n-(get-model)\n-; Declare real variables for the left and right end of intervals\r\n-(declare-const l0 Real)\r\n-(declare-const r0 Real)\r\n-(declare-const l1 Real)\r\n-(declare-const r1 Real)\r\n-(declare-const l2 Real)\r\n-(declare-const r2 Real)\r\n-(declare-const l3 Real)\r\n-(declare-const r3 Real)\r\n-\r\n-; Function to check if A intersects with B\r\n-(define-fun intersects ((l0 Real) (r0 Real) (l1 Real) (r1 Real)) Bool\r\n-  (and (< l0 r1) (< l1 r0)))\r\n-\r\n-; Check for each interval, l < r\r\n-(assert (< l0 r0))\r\n-(assert (< l1 r1))\r\n-(assert (< l2 r2))\r\n-(assert (< l3 r3))\r\n-\r\n-; Check for each edge, two intervals should intersect\r\n-(assert (intersects l0 r0 l1 r1))\r\n-(assert (intersects l0 r0 l2 r2))\r\n-(assert (intersects l1 r1 l3 r3))\r\n-(assert (intersects l2 r2 l3 r3))\r\n-\r\n-; Check for two nodes that are not connected, two intervals should not intersect\r\n-(assert (not (intersects l0 r0 l4 r4)))\r\n-(assert (not (intersects l1 r1 l2 r2)))\r\n-\r\n-; Check satisfiability\r\n-(check-sat)\r\n-\r\n-; Get model\r\n (get-model)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739773939157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,4 @@\n (assert (not (intersects l1 r1 l2 r2)))\r\n \r\n ; Check satisfiability\r\n (check-sat)\r\n-\r\n-; Get model\r\n-(get-model)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739774571290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+(set-logic ALL)\r\n+\r\n+; Declare real variables for the left and right end of intervals\r\n+(declare-const l0 Real)\r\n+(declare-const r0 Real)\r\n+(declare-const l1 Real)\r\n+(declare-const r1 Real)\r\n+(declare-const l2 Real)\r\n+(declare-const r2 Real)\r\n+(declare-const l3 Real)\r\n+(declare-const r3 Real)\r\n+\r\n+; Function to check if A intersects with B\r\n+(define-fun intersects ((l0 Real) (r0 Real) (l1 Real) (r1 Real)) Bool\r\n+  (and \r\n+    (< l0 r1) (< l1 r0)\r\n+  ))\r\n+\r\n+; Check for each interval, l < r\r\n+(assert (< l0 r0))\r\n+(assert (< l1 r1))\r\n+(assert (< l2 r2))\r\n+(assert (< l3 r3))\r\n+\r\n+; Check for each edge, two intervals should intersect\r\n+(assert (intersects l0 r0 l1 r1))\r\n+(assert (intersects l0 r0 l2 r2))\r\n+(assert (intersects l1 r1 l3 r3))\r\n+(assert (intersects l2 r2 l3 r3))\r\n+\r\n+; Check if there exists two nodes that are not connected, two intervals intersect\r\n+(assert (or (intersects l0 r0 l3 r3)\r\n+  ))\r\n+(assert (not (intersects l1 r1 l2 r2)))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\r\n"
                },
                {
                    "date": 1739774616505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,12 @@\n (assert (intersects l1 r1 l3 r3))\r\n (assert (intersects l2 r2 l3 r3))\r\n \r\n ; Check if there exists two nodes that are not connected, two intervals intersect\r\n-(assert (or (intersects l0 r0 l3 r3)\r\n+(assert \r\n+  (or \r\n+    (intersects l0 r0 l3 r3)\r\n+    (intersects l1 r1 l2 r2)\r\n   ))\r\n-(assert (not (intersects l1 r1 l2 r2)))\r\n \r\n ; Check satisfiability\r\n (check-sat)\r\n"
                },
                {
                    "date": 1739774631924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,38 +36,4 @@\n   ))\r\n \r\n ; Check satisfiability\r\n (check-sat)\r\n-(set-logic ALL)\r\n-\r\n-; Declare real variables for the left and right end of intervals\r\n-(declare-const l0 Real)\r\n-(declare-const r0 Real)\r\n-(declare-const l1 Real)\r\n-(declare-const r1 Real)\r\n-(declare-const l2 Real)\r\n-(declare-const r2 Real)\r\n-(declare-const l3 Real)\r\n-(declare-const r3 Real)\r\n-\r\n-; Function to check if A intersects with B\r\n-(define-fun intersects ((l0 Real) (r0 Real) (l1 Real) (r1 Real)) Bool\r\n-  (and (< l0 r1) (< l1 r0)))\r\n-\r\n-; Check for each interval, l < r\r\n-(assert (< l0 r0))\r\n-(assert (< l1 r1))\r\n-(assert (< l2 r2))\r\n-(assert (< l3 r3))\r\n-\r\n-; Check for each edge, two intervals should intersect\r\n-(assert (intersects l0 r0 l1 r1))\r\n-(assert (intersects l0 r0 l2 r2))\r\n-(assert (intersects l1 r1 l3 r3))\r\n-(assert (intersects l2 r2 l3 r3))\r\n-\r\n-; Check for two nodes that are not connected, two intervals should not intersect\r\n-(assert (not (intersects l0 r0 l3 r3)))\r\n-(assert (not (intersects l1 r1 l2 r2)))\r\n-\r\n-; Check satisfiability\r\n-(check-sat)\r\n"
                },
                {
                    "date": 1739774757037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n (set-logic ALL)\r\n \r\n+; In order to check validity of alpha_G, the following is describing ~alpha_G\r\n+\r\n ; Declare real variables for the left and right end of intervals\r\n (declare-const l0 Real)\r\n (declare-const r0 Real)\r\n (declare-const l1 Real)\r\n"
                }
            ],
            "date": 1739772206033,
            "name": "Commit-0",
            "content": "; Declare real variables for the left and right end of intervals\r\n(declare-const l1 Real)\r\n(declare-const r1 Real)\r\n(declare-const l2 Real)\r\n(declare-const r2 Real)\r\n(declare-const l3 Real)\r\n(declare-const r3 Real)\r\n(declare-const l4 Real)\r\n(declare-const r4 Real)\r\n\r\n;; Intervals must be valid (left endpoint < right endpoint)\r\n(assert (< l1 r1))\r\n(assert (< l2 r2))\r\n(assert (< l3 r3))\r\n(assert (< l4 r4))\r\n\r\n;; Define intersection conditions\r\n(define-fun intersects ((lA Real) (rA Real) (lB Real) (rB Real)) Bool\r\n  (and (< lA rB) (< lB rA)))\r\n\r\n;; C4 adjacency constraints:\r\n(assert (intersects l1 r1 l2 r2))  ;; Edge (1,2)\r\n(assert (intersects l2 r2 l3 r3))  ;; Edge (2,3)\r\n(assert (intersects l3 r3 l4 r4))  ;; Edge (3,4)\r\n(assert (intersects l4 r4 l1 r1))  ;; Edge (4,1)\r\n\r\n;; Non-adjacency constraints (these pairs must not intersect):\r\n(assert (not (intersects l1 r1 l3 r3))) ;; No edge (1,3)\r\n(assert (not (intersects l2 r2 l4 r4))) ;; No edge (2,4)\r\n\r\n;; Check satisfiability\r\n(check-sat)"
        }
    ]
}