{
    "sourceFile": "hliu794_hw1_g.smt2",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1739772540737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739772939522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+(set-logic ALL)\r\n+\r\n ; Declare boolean variables for each node\r\n (declare-fun p00 () Bool)\r\n (declare-fun p01 () Bool)\r\n (declare-fun p02 () Bool)\r\n"
                },
                {
                    "date": 1739773127053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     (and p00 p01 (not p02))\r\n   ))\r\n \r\n ; Function to check if adjacent nodes are in same color\r\n-(define-fun not_same_color (pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool) Bool\r\n+(define-fun not_same_color ((pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool)) Bool\r\n   (and\r\n     (not (and pu0 pv0))\r\n     (not (and pu1 pv1))\r\n     (not (and pu2 pv2))\r\n"
                },
                {
                    "date": 1739774982912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,11 @@\n \r\n ; Function to check if one node is colored exactly once\r\n (define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n   (or \r\n-    (and (not p00) p01 p02)\r\n-    (and p00 (not p01) p02) \r\n-    (and p00 p01 (not p02))\r\n+    (and p00 (not p01) (not p02))\r\n+    (and (not p00) p01 (not p02)) \r\n+    (and (not p00) (not p01) p02)\r\n   ))\r\n \r\n ; Function to check if adjacent nodes are in same color\r\n (define-fun not_same_color ((pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool)) Bool\r\n"
                },
                {
                    "date": 1739775047388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+(set-logic ALL)\r\n+\r\n+; Declare boolean variables for each node\r\n+(declare-fun p00 () Bool)\r\n+(declare-fun p01 () Bool)\r\n+(declare-fun p02 () Bool)\r\n+(declare-fun p10 () Bool)\r\n+(declare-fun p11 () Bool)\r\n+(declare-fun p12 () Bool)\r\n+(declare-fun p20 () Bool)\r\n+(declare-fun p21 () Bool)\r\n+(declare-fun p22 () Bool)\r\n+(declare-fun p30 () Bool)\r\n+(declare-fun p31 () Bool)\r\n+(declare-fun p32 () Bool)\r\n+\r\n+; Function to check if one node is colored exactly once\r\n+(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n+  (or \r\n+    (and p0 (not p1) (not p2))\r\n+    (and (not p0) p1 (not p2)) \r\n+    (and (not p0) (not p1) p2)\r\n+  ))\r\n+\r\n+; Function to check if adjacent nodes are in same color\r\n+(define-fun not_same_color ((pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool)) Bool\r\n+  (and\r\n+    (not (and pu0 pv0))\r\n+    (not (and pu1 pv1))\r\n+    (not (and pu2 pv2))\r\n+  ))\r\n+\r\n+; Each node must have exactly one color\r\n+(assert (one_color p00 p01 p02))\r\n+(assert (one_color p10 p11 p12))\r\n+(assert (one_color p20 p21 p22))\r\n+(assert (one_color p30 p31 p32))\r\n+\r\n+; Adjacent nodes should be colored differently\r\n+(assert (not_same_color p00 p01 p02 p10 p11 p12))\r\n+(assert (not_same_color p00 p01 p02 p20 p21 p22))\r\n+(assert (not_same_color p00 p01 p02 p30 p31 p32))\r\n+(assert (not_same_color p10 p11 p12 p20 p21 p22))\r\n+(assert (not_same_color p10 p11 p12 p30 p31 p32))\r\n+(assert (not_same_color p20 p21 p22 p30 p31 p32))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\r\n+\r\n+; Get model\r\n+(get-model)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739772540737,
            "name": "Commit-0",
            "content": "; Declare boolean variables for each node\r\n(declare-fun p00 () Bool)\r\n(declare-fun p01 () Bool)\r\n(declare-fun p02 () Bool)\r\n(declare-fun p10 () Bool)\r\n(declare-fun p11 () Bool)\r\n(declare-fun p12 () Bool)\r\n(declare-fun p20 () Bool)\r\n(declare-fun p21 () Bool)\r\n(declare-fun p22 () Bool)\r\n(declare-fun p30 () Bool)\r\n(declare-fun p31 () Bool)\r\n(declare-fun p32 () Bool)\r\n\r\n; Function to check if one node is colored exactly once\r\n(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n  (or \r\n    (and (not p00) p01 p02)\r\n    (and p00 (not p01) p02) \r\n    (and p00 p01 (not p02))\r\n  ))\r\n\r\n; Function to check if adjacent nodes are in same color\r\n(define-fun not_same_color (pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool) Bool\r\n  (and\r\n    (not (and pu0 pv0))\r\n    (not (and pu1 pv1))\r\n    (not (and pu2 pv2))\r\n  ))\r\n\r\n; Each node must have exactly one color\r\n(assert (one_color p00 p01 p02))\r\n(assert (one_color p10 p11 p12))\r\n(assert (one_color p20 p21 p22))\r\n(assert (one_color p30 p31 p32))\r\n\r\n; Adjacent nodes should be colored differently\r\n(assert (not_same_color p00 p01 p02 p10 p11 p12))\r\n(assert (not_same_color p00 p01 p02 p20 p21 p22))\r\n(assert (not_same_color p00 p01 p02 p30 p31 p32))\r\n(assert (not_same_color p10 p11 p12 p20 p21 p22))\r\n(assert (not_same_color p10 p11 p12 p30 p31 p32))\r\n(assert (not_same_color p20 p21 p22 p30 p31 p32))\r\n\r\n; Check satisfiability\r\n(check-sat)\r\n\r\n; Get model\r\n(get-model)"
        }
    ]
}