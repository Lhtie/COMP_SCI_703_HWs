{
    "sourceFile": "9087186681_hw1_g.smt2",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1739769450267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739769600640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-; Declare boolean variables for each node-color assignment\r\n+; Declare boolean variables for each node\r\n (declare-fun p00 () Bool)\r\n (declare-fun p01 () Bool)\r\n (declare-fun p02 () Bool)\r\n (declare-fun p10 () Bool)\r\n@@ -18,9 +18,9 @@\n        (not (or (and p0 p1) (and p0 p2) (and p1 p2)))  ; At most one color\r\n   ))\r\n \r\n ; Each node must have exactly one color\r\n-(assert (one_color p00 p01 p02))\r\n+(assert (or (and (not p00) p01 p02)) (and p00 (not p01) p02) (and p00 p01 (not p02)))\r\n (assert (one_color p10 p11 p12))\r\n (assert (one_color p20 p21 p22))\r\n (assert (one_color p30 p31 p32))\r\n \r\n"
                },
                {
                    "date": 1739769696284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,16 +13,18 @@\n (declare-fun p32 () Bool)\r\n \r\n ; Function to enforce that exactly one color is chosen for a given node\r\n (define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n-  (and (or p0 p1 p2)  ; At least one color is chosen\r\n-       (not (or (and p0 p1) (and p0 p2) (and p1 p2)))  ; At most one color\r\n+  (or \r\n+    (and (not p00) p01 p02)\r\n+    (and p00 (not p01) p02) \r\n+    (and p00 p01 (not p02))\r\n   ))\r\n \r\n ; Each node must have exactly one color\r\n (assert (or (and (not p00) p01 p02)) (and p00 (not p01) p02) (and p00 p01 (not p02)))\r\n-(assert (one_color p10 p11 p12))\r\n-(assert (one_color p20 p21 p22))\r\n+(assert (or (and (not p10) p11 p12)) (and p10 (not p11) p12) (and p10 p11 (not p12)))\r\n+(assert (or (and (not p20) p21 p22)) (and p20 (not p21) p22) (and p20 p21 (not p22)))\r\n (assert (one_color p30 p31 p32))\r\n \r\n ; Adjacent nodes must not have the same color\r\n (assert (not (and p00 p10)))\r\n"
                },
                {
                    "date": 1739769744903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n (declare-fun p30 () Bool)\r\n (declare-fun p31 () Bool)\r\n (declare-fun p32 () Bool)\r\n \r\n-; Function to enforce that exactly one color is chosen for a given node\r\n+; Function to check if one node is colored with exactly one color\r\n (define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n   (or \r\n     (and (not p00) p01 p02)\r\n     (and p00 (not p01) p02) \r\n"
                },
                {
                    "date": 1739769750776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+; Declare boolean variables for each node\r\n+(declare-fun p00 () Bool)\r\n+(declare-fun p01 () Bool)\r\n+(declare-fun p02 () Bool)\r\n+(declare-fun p10 () Bool)\r\n+(declare-fun p11 () Bool)\r\n+(declare-fun p12 () Bool)\r\n+(declare-fun p20 () Bool)\r\n+(declare-fun p21 () Bool)\r\n+(declare-fun p22 () Bool)\r\n+(declare-fun p30 () Bool)\r\n+(declare-fun p31 () Bool)\r\n+(declare-fun p32 () Bool)\r\n+\r\n+; Function to check if one node is colored exactly once\r\n+(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n+  (or \r\n+    (and (not p00) p01 p02)\r\n+    (and p00 (not p01) p02) \r\n+    (and p00 p01 (not p02))\r\n+  ))\r\n+\r\n+; Each node must have exactly one color\r\n+(assert (or (and (not p00) p01 p02)) (and p00 (not p01) p02) (and p00 p01 (not p02)))\r\n+(assert (or (and (not p10) p11 p12)) (and p10 (not p11) p12) (and p10 p11 (not p12)))\r\n+(assert (or (and (not p20) p21 p22)) (and p20 (not p21) p22) (and p20 p21 (not p22)))\r\n+(assert (one_color p30 p31 p32))\r\n+\r\n+; Adjacent nodes must not have the same color\r\n+(assert (not (and p00 p10)))\r\n+(assert (not (and p00 p20)))\r\n+(assert (not (and p00 p30)))\r\n+(assert (not (and p10 p20)))\r\n+(assert (not (and p10 p30)))\r\n+(assert (not (and p20 p30)))\r\n+\r\n+(assert (not (and p01 p11)))\r\n+(assert (not (and p01 p21)))\r\n+(assert (not (and p01 p31)))\r\n+(assert (not (and p11 p21)))\r\n+(assert (not (and p11 p31)))\r\n+(assert (not (and p21 p31)))\r\n+\r\n+(assert (not (and p02 p12)))\r\n+(assert (not (and p02 p22)))\r\n+(assert (not (and p02 p32)))\r\n+(assert (not (and p12 p22)))\r\n+(assert (not (and p12 p32)))\r\n+(assert (not (and p22 p32)))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739770000931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+; Declare boolean variables for each node\r\n+(declare-fun p00 () Bool)\r\n+(declare-fun p01 () Bool)\r\n+(declare-fun p02 () Bool)\r\n+(declare-fun p10 () Bool)\r\n+(declare-fun p11 () Bool)\r\n+(declare-fun p12 () Bool)\r\n+(declare-fun p20 () Bool)\r\n+(declare-fun p21 () Bool)\r\n+(declare-fun p22 () Bool)\r\n+(declare-fun p30 () Bool)\r\n+(declare-fun p31 () Bool)\r\n+(declare-fun p32 () Bool)\r\n+\r\n+; Function to check if one node is colored exactly once\r\n+(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n+  (or \r\n+    (and (not p00) p01 p02)\r\n+    (and p00 (not p01) p02) \r\n+    (and p00 p01 (not p02))\r\n+  ))\r\n+\r\n+; Function to check if adjacent nodes are in same color\r\n+(define-fun not_same_color (pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool) Bool\r\n+  (and\r\n+    (not (and pu0 pv0))\r\n+    (not (and pu1 pv1))\r\n+    (not (and pu2 pv2))\r\n+  ))\r\n+\r\n+; Each node must have exactly one color\r\n+(assert (or (and (not p00) p01 p02)) (and p00 (not p01) p02) (and p00 p01 (not p02)))\r\n+(assert (or (and (not p10) p11 p12)) (and p10 (not p11) p12) (and p10 p11 (not p12)))\r\n+(assert (or (and (not p20) p21 p22)) (and p20 (not p21) p22) (and p20 p21 (not p22)))\r\n+(assert (one_color p30 p31 p32))\r\n+\r\n+; Adjacent nodes should be colored differently\r\n+(assert (not (and p00 p10)))\r\n+(assert (not (and p00 p20)))\r\n+(assert (not (and p00 p30)))\r\n+(assert (not (and p10 p20)))\r\n+(assert (not (and p10 p30)))\r\n+(assert (not (and p20 p30)))\r\n+\r\n+(assert (not (and p01 p11)))\r\n+(assert (not (and p01 p21)))\r\n+(assert (not (and p01 p31)))\r\n+(assert (not (and p11 p21)))\r\n+(assert (not (and p11 p31)))\r\n+(assert (not (and p21 p31)))\r\n+\r\n+(assert (not (and p02 p12)))\r\n+(assert (not (and p02 p22)))\r\n+(assert (not (and p02 p32)))\r\n+(assert (not (and p12 p22)))\r\n+(assert (not (and p12 p32)))\r\n+(assert (not (and p22 p32)))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739770033763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+; Declare boolean variables for each node\r\n+(declare-fun p00 () Bool)\r\n+(declare-fun p01 () Bool)\r\n+(declare-fun p02 () Bool)\r\n+(declare-fun p10 () Bool)\r\n+(declare-fun p11 () Bool)\r\n+(declare-fun p12 () Bool)\r\n+(declare-fun p20 () Bool)\r\n+(declare-fun p21 () Bool)\r\n+(declare-fun p22 () Bool)\r\n+(declare-fun p30 () Bool)\r\n+(declare-fun p31 () Bool)\r\n+(declare-fun p32 () Bool)\r\n+\r\n+; Function to check if one node is colored exactly once\r\n+(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n+  (or \r\n+    (and (not p00) p01 p02)\r\n+    (and p00 (not p01) p02) \r\n+    (and p00 p01 (not p02))\r\n+  ))\r\n+\r\n+; Function to check if adjacent nodes are in same color\r\n+(define-fun not_same_color (pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool) Bool\r\n+  (and\r\n+    (not (and pu0 pv0))\r\n+    (not (and pu1 pv1))\r\n+    (not (and pu2 pv2))\r\n+  ))\r\n+\r\n+; Each node must have exactly one color\r\n+(assert (one_color p00 p01 p02))\r\n+(assert (one_color p10 p11 p12))\r\n+(assert (one_color p20 p21 p22))\r\n+(assert (one_color p30 p31 p32))\r\n+\r\n+; Adjacent nodes should be colored differently\r\n+(assert ())\r\n+(assert (not (and p00 p10)))\r\n+(assert (not (and p00 p20)))\r\n+(assert (not (and p00 p30)))\r\n+(assert (not (and p10 p20)))\r\n+(assert (not (and p10 p30)))\r\n+(assert (not (and p20 p30)))\r\n+\r\n+(assert (not (and p01 p11)))\r\n+(assert (not (and p01 p21)))\r\n+(assert (not (and p01 p31)))\r\n+(assert (not (and p11 p21)))\r\n+(assert (not (and p11 p31)))\r\n+(assert (not (and p21 p31)))\r\n+\r\n+(assert (not (and p02 p12)))\r\n+(assert (not (and p02 p22)))\r\n+(assert (not (and p02 p32)))\r\n+(assert (not (and p12 p22)))\r\n+(assert (not (and p12 p32)))\r\n+(assert (not (and p22 p32)))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739770119688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+; Declare boolean variables for each node\r\n+(declare-fun p00 () Bool)\r\n+(declare-fun p01 () Bool)\r\n+(declare-fun p02 () Bool)\r\n+(declare-fun p10 () Bool)\r\n+(declare-fun p11 () Bool)\r\n+(declare-fun p12 () Bool)\r\n+(declare-fun p20 () Bool)\r\n+(declare-fun p21 () Bool)\r\n+(declare-fun p22 () Bool)\r\n+(declare-fun p30 () Bool)\r\n+(declare-fun p31 () Bool)\r\n+(declare-fun p32 () Bool)\r\n+\r\n+; Function to check if one node is colored exactly once\r\n+(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n+  (or \r\n+    (and (not p00) p01 p02)\r\n+    (and p00 (not p01) p02) \r\n+    (and p00 p01 (not p02))\r\n+  ))\r\n+\r\n+; Function to check if adjacent nodes are in same color\r\n+(define-fun not_same_color (pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool) Bool\r\n+  (and\r\n+    (not (and pu0 pv0))\r\n+    (not (and pu1 pv1))\r\n+    (not (and pu2 pv2))\r\n+  ))\r\n+\r\n+; Each node must have exactly one color\r\n+(assert (one_color p00 p01 p02))\r\n+(assert (one_color p10 p11 p12))\r\n+(assert (one_color p20 p21 p22))\r\n+(assert (one_color p30 p31 p32))\r\n+\r\n+; Adjacent nodes should be colored differently\r\n+(assert (not_same_color p00 p01 p02 p10 p11 p12))\r\n+(assert (not_same_color p00 p01 p02 p20 p21 p22))\r\n+(assert (not_same_color p00 p01 p02 p30 p31 p32))\r\n+(assert (not_same_color p10 p11 p12 p20 p21 p22))\r\n+(assert (not_same_color p10 p11 p12 p30 p31 p32))\r\n+(assert (not_same_color p20 p21 p22 p30 p31 p32))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739770981833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+; Declare boolean variables for each node\r\n+(declare-fun p00 () Bool)\r\n+(declare-fun p01 () Bool)\r\n+(declare-fun p02 () Bool)\r\n+(declare-fun p10 () Bool)\r\n+(declare-fun p11 () Bool)\r\n+(declare-fun p12 () Bool)\r\n+(declare-fun p20 () Bool)\r\n+(declare-fun p21 () Bool)\r\n+(declare-fun p22 () Bool)\r\n+(declare-fun p30 () Bool)\r\n+(declare-fun p31 () Bool)\r\n+(declare-fun p32 () Bool)\r\n+\r\n+; Function to check if one node is colored exactly once\r\n+(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n+  (or \r\n+    (and (not p00) p01 p02)\r\n+    (and p00 (not p01) p02) \r\n+    (and p00 p01 (not p02))\r\n+  ))\r\n+\r\n+; Function to check if adjacent nodes are in same color\r\n+(define-fun not_same_color (pu0 Bool) (pu1 Bool) (pu2 Bool) (pv0 Bool) (pv1 Bool) (pv2 Bool) Bool\r\n+  (and\r\n+    (not (and pu0 pv0))\r\n+    (not (and pu1 pv1))\r\n+    (not (and pu2 pv2))\r\n+  ))\r\n+\r\n+; Each node must have exactly one color\r\n+(assert (one_color p00 p01 p02))\r\n+(assert (one_color p10 p11 p12))\r\n+(assert (one_color p20 p21 p22))\r\n+(assert (one_color p30 p31 p32))\r\n+\r\n+; Adjacent nodes should be colored differently\r\n+(assert (not_same_color p00 p01 p02 p10 p11 p12))\r\n+(assert (not_same_color p00 p01 p02 p20 p21 p22))\r\n+(assert (not_same_color p00 p01 p02 p30 p31 p32))\r\n+(assert (not_same_color p10 p11 p12 p20 p21 p22))\r\n+(assert (not_same_color p10 p11 p12 p30 p31 p32))\r\n+(assert (not_same_color p20 p21 p22 p30 p31 p32))\r\n+\r\n+; Check satisfiability\r\n+(check-sat)\r\n+(get-model)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739769450267,
            "name": "Commit-0",
            "content": "; Declare boolean variables for each node-color assignment\r\n(declare-fun p00 () Bool)\r\n(declare-fun p01 () Bool)\r\n(declare-fun p02 () Bool)\r\n(declare-fun p10 () Bool)\r\n(declare-fun p11 () Bool)\r\n(declare-fun p12 () Bool)\r\n(declare-fun p20 () Bool)\r\n(declare-fun p21 () Bool)\r\n(declare-fun p22 () Bool)\r\n(declare-fun p30 () Bool)\r\n(declare-fun p31 () Bool)\r\n(declare-fun p32 () Bool)\r\n\r\n; Function to enforce that exactly one color is chosen for a given node\r\n(define-fun one_color ((p0 Bool) (p1 Bool) (p2 Bool)) Bool\r\n  (and (or p0 p1 p2)  ; At least one color is chosen\r\n       (not (or (and p0 p1) (and p0 p2) (and p1 p2)))  ; At most one color\r\n  ))\r\n\r\n; Each node must have exactly one color\r\n(assert (one_color p00 p01 p02))\r\n(assert (one_color p10 p11 p12))\r\n(assert (one_color p20 p21 p22))\r\n(assert (one_color p30 p31 p32))\r\n\r\n; Adjacent nodes must not have the same color\r\n(assert (not (and p00 p10)))\r\n(assert (not (and p00 p20)))\r\n(assert (not (and p00 p30)))\r\n(assert (not (and p10 p20)))\r\n(assert (not (and p10 p30)))\r\n(assert (not (and p20 p30)))\r\n\r\n(assert (not (and p01 p11)))\r\n(assert (not (and p01 p21)))\r\n(assert (not (and p01 p31)))\r\n(assert (not (and p11 p21)))\r\n(assert (not (and p11 p31)))\r\n(assert (not (and p21 p31)))\r\n\r\n(assert (not (and p02 p12)))\r\n(assert (not (and p02 p22)))\r\n(assert (not (and p02 p32)))\r\n(assert (not (and p12 p22)))\r\n(assert (not (and p12 p32)))\r\n(assert (not (and p22 p32)))\r\n\r\n; Check satisfiability\r\n(check-sat)"
        }
    ]
}